Grammar:
    delimiter* Rule*
;

delimiter:
    | space
    | comment
;

space:
    [\s\n\t\r]+
;

comment:
    '/*' AnySymbol*>> '*/'
;

Rule:
    RuleName! delimiter* ':' delimiter* RuleBody ';' delimiter*
;

RuleName:
    ID
;

ID:
    [a-zA-Z_] [a-zA-Z_0-9]*
;

RuleBody:
    '|'? delimiter* Statement ('|' delimiter* Statement)*
;

Statement:
    Expression+
;

Expression:
    Element FunctionCall? Quantifier? LookAhead? Cut? delimiter*
;

Element:
    | RuleName
    | StringLiteral
    | RegexpLiteral
    | InlineRule
;

Quantifier:
    | '*'
    | '?'
    | '+'
    | '{' Count '}'
;

Count:
    | IntValue
    | FunctionCall
;

IntValue:
    [0-9]+
;

FunctionCall:
    '={'! FunctionName (',' FunctionName)* '}'
;

FunctionName:
    ID
;

LookAhead:
    | '>>'
    | '>' Element
;

Cut:
    '!'
;

InlineRule:
    '('! RuleBody ')'
;

StringLiteral:
    '\''! Symbol+>> '\''
;

RegexpLiteral:
    | '['! SymbolRange+>> ']'
    | AnySymbolLiteral
;

SymbolRange:
    Symbol>']' ('-'! Symbol>']')?
;

Symbol:
    | HexCodeSymbol
    | EscapedSymbol
    | AnySymbol
;

HexCodeSymbol:
    '\\x'! HexDigit HexDigit
;

HexDigit:
    [0-9A-F]
;

EscapedSymbol:
    '\\'! AnySymbol
;

AnySymbol:
    .
;

AnySymbolLiteral:
    '.'
;
